# -*- coding: utf-8 -*-
"""Mini_Project_Student_Marks_Prediction_and_Improvement.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-QGTpsZQ1s-RsS-4AWgoCkg4VJK7xwxr

# **Students' Marks Prediction and Improvement**

## Import Dependencies
"""

import pandas as pd
import numpy as np
import os
from sklearn.preprocessing import MinMaxScaler
import seaborn as sns
from sklearn.neighbors import KNeighborsClassifier
from matplotlib import pyplot as plt
from sklearn.model_selection import train_test_split
import xgboost as xgb
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix, classification_report
from imblearn.over_sampling import RandomOverSampler
from imblearn.under_sampling import RandomUnderSampler
import joblib

"""## Setting up Directories and Environments"""

list_of_data_path = os.listdir('/content/dataset')
list_of_data_path = ['/content/dataset/' + i for i in list_of_data_path]

sub_name_list = []
classification_report_dict = {
    'svm_nfp' : {},
    'svm_ros' : {},
    'svm_rus' : {},
    'xgb_nfp' : {},
    'xgb_ros' : {},
    'xgb_rus' : {}
}
temp_dict = {}

"""## SVM Classifier

### With No Further Processing
"""

for i in range(len(list_of_data_path)):
  data = pd.read_excel(list_of_data_path[i], index_col=0)
  data.replace(-1, 0, inplace = True)
  sub_name = list_of_data_path[i].split('/')[3].split('_')[1].split('.')[0]
  sub_name_list.append(sub_name)

  passes = pd.Series(data['ese'] >= 40)
  data = pd.concat([data, passes.rename("Result")], axis=1)

  data.replace({'Result' : {True : 1, False : 0}}, inplace = True)

  X = data[['att','ct1','ct2','ta']]
  y = data['Result']
  X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3 , random_state = 2529)

  model = KNeighborsClassifier()
  model.fit(X_train, y_train)
  y_pred  = model.predict(X_test)

  temp_dict = classification_report(y_test, y_pred, output_dict=True)
  classification_report_dict['svm_nfp'][sub_name + '_model'] = round(temp_dict['accuracy'] * 100, 2)

  print(str(i+1) + '. ' + sub_name)
  print('\nConfusion Matrix :\n')
  print(confusion_matrix(y_test, y_pred))
  print('\n\nClassification Report :\n')
  print(classification_report(y_test, y_pred))
  print('-' * 55)
  print('\n')

"""### With Random OverSampling"""

for i in range(len(list_of_data_path)):
  data = pd.read_excel(list_of_data_path[i], index_col=0)
  data.replace(-1, 0, inplace = True)
  sub_name = list_of_data_path[i].split('/')[3].split('_')[1].split('.')[0]

  passes = pd.Series(data['ese'] >= 40)
  data = pd.concat([data, passes.rename("Result")], axis=1)

  data.replace({'Result' : {True : 1, False : 0}}, inplace = True)

  X = data[['att','ct1','ct2','ta']]
  y = data['Result']
  ros = RandomOverSampler(random_state = 12529)
  X_ros, y_ros = ros.fit_resample(X, y)

  X_train, X_test, y_train, y_test = train_test_split(X_ros, y_ros, test_size = 0.3 , random_state = 2529)

  model = KNeighborsClassifier()
  model.fit(X_train, y_train)
  y_pred  = model.predict(X_test)

  temp_dict = classification_report(y_test, y_pred, output_dict=True)
  classification_report_dict['svm_ros'][sub_name + '_model'] = round(temp_dict['accuracy'] * 100, 2)

  print(str(i+1) + '. ' + sub_name)
  print('\nConfusion Matrix :\n')
  print(confusion_matrix(y_test, y_pred))
  print('\n\nClassification Report :\n')
  print(classification_report(y_test, y_pred))
  print('-' * 55)
  print('\n')

"""### With Random UnderSampling"""

for i in range(len(list_of_data_path)):
  data = pd.read_excel(list_of_data_path[i], index_col=0)
  data.replace(-1, 0, inplace = True)
  sub_name = list_of_data_path[i].split('/')[3].split('_')[1].split('.')[0]

  passes = pd.Series(data['ese'] >= 40)
  data = pd.concat([data, passes.rename("Result")], axis=1)

  data.replace({'Result' : {True : 1, False : 0}}, inplace = True)

  X = data[['att','ct1','ct2','ta']]
  y = data['Result']
  rus = RandomUnderSampler(random_state = 12529)
  X_rus, y_rus = rus.fit_resample(X, y)

  X_train, X_test, y_train, y_test = train_test_split(X_rus, y_rus, test_size = 0.3 , random_state = 2529)

  model = KNeighborsClassifier()
  model.fit(X_train, y_train)
  y_pred  = model.predict(X_test)

  temp_dict = classification_report(y_test, y_pred, output_dict=True)
  classification_report_dict['svm_rus'][sub_name + '_model'] = round(temp_dict['accuracy'] * 100, 2)

  print(str(i+1) + '. ' + sub_name)
  print('\nConfusion Matrix :\n')
  print(confusion_matrix(y_test, y_pred))
  print('\n\nClassification Report :\n')
  print(classification_report(y_test, y_pred))
  print('-' * 55)
  print('\n')

"""## XGB Classifier

### With No Further Processing
"""

for i in range(len(list_of_data_path)):
  data = pd.read_excel(list_of_data_path[i], index_col=0)
  data.replace(-1, 0, inplace = True)
  sub_name = list_of_data_path[i].split('/')[3].split('_')[1].split('.')[0]

  passes = pd.Series(data['ese'] >= 40)
  data = pd.concat([data, passes.rename("Result")], axis=1)

  data.replace({'Result' : {True : 1, False : 0}}, inplace = True)

  X = data[['att','ct1','ct2','ta']]
  y = data['Result']
  X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3 , random_state = 2529)

  model = xgb.XGBClassifier()
  model.fit(X_train, y_train)
  y_pred  = model.predict(X_test)

  temp_dict = classification_report(y_test, y_pred, output_dict=True)
  classification_report_dict['xgb_nfp'][sub_name + '_model'] = round(temp_dict['accuracy'] * 100, 2)

  print(str(i+1) + '. ' + sub_name)
  print('\nConfusion Matrix :\n')
  print(confusion_matrix(y_test, y_pred))
  print('\n\nClassification Report :\n')
  print(classification_report(y_test, y_pred))
  print('-' * 55)
  print('\n')

"""### With Random OverSampling"""

for i in range(len(list_of_data_path)):
  data = pd.read_excel(list_of_data_path[i], index_col=0)
  data.replace(-1, 0, inplace = True)
  sub_name = list_of_data_path[i].split('/')[3].split('_')[1].split('.')[0]

  passes = pd.Series(data['ese'] >= 40)
  data = pd.concat([data, passes.rename("Result")], axis=1)

  data.replace({'Result' : {True : 1, False : 0}}, inplace = True)

  X = data[['att','ct1','ct2','ta']]
  y = data['Result']
  ros = RandomOverSampler(random_state = 12529)
  X_ros, y_ros = ros.fit_resample(X, y)

  X_train, X_test, y_train, y_test = train_test_split(X_ros, y_ros, test_size = 0.3 , random_state = 2529)

  model = xgb.XGBClassifier()
  model.fit(X_train, y_train)

  joblib.dump(model, '/content/models/' + sub_name + '_model.pkl')

  y_pred  = model.predict(X_test)

  temp_dict = classification_report(y_test, y_pred, output_dict=True)
  classification_report_dict['xgb_ros'][sub_name + '_model'] = round(temp_dict['accuracy'] * 100, 2)

  print(str(i+1) + '. ' + sub_name)
  print('\nConfusion Matrix :\n')
  print(confusion_matrix(y_test, y_pred))
  print('\n\nClassification Report :\n')
  print(classification_report(y_test, y_pred))
  print('-' * 55)
  print('\n')

"""### With Random UnderSampling"""

for i in range(len(list_of_data_path)):
  data = pd.read_excel(list_of_data_path[i], index_col=0)
  data.replace(-1, 0, inplace = True)
  sub_name = list_of_data_path[i].split('/')[3].split('_')[1].split('.')[0]

  passes = pd.Series(data['ese'] >= 40)
  data = pd.concat([data, passes.rename("Result")], axis=1)

  data.replace({'Result' : {True : 1, False : 0}}, inplace = True)

  X = data[['att','ct1','ct2','ta']]
  y = data['Result']
  rus = RandomUnderSampler(random_state = 12529)
  X_rus, y_rus = rus.fit_resample(X, y)

  X_train, X_test, y_train, y_test = train_test_split(X_rus, y_rus, test_size = 0.3 , random_state = 2529)

  model = xgb.XGBClassifier()
  model.fit(X_train, y_train)
  y_pred  = model.predict(X_test)

  temp_dict = classification_report(y_test, y_pred, output_dict=True)
  classification_report_dict['xgb_rus'][sub_name + '_model'] = round(temp_dict['accuracy'] * 100, 2)

  print(str(i+1) + '. ' + sub_name)
  print('\nConfusion Matrix :\n')
  print(confusion_matrix(y_test, y_pred))
  print('\n\nClassification Report :\n')
  print(classification_report(y_test, y_pred))
  print('-' * 55)
  print('\n')

"""## Model Mecric Report"""

model_metrics = pd.DataFrame(classification_report_dict)
model_metrics.loc['average'] = model_metrics.mean(axis = 0)
model_metrics['average'] = model_metrics.mean(axis = 1)
model_metrics.round(2)

"""## Sample Prediction

### Function to predict result
"""

def predict_my_result(sub_name, att, ct1, ct2, ta):
  model_name = '/content/models/' + sub_name + '_model.pkl'
  model = joblib.load(model_name)
  test_row = pd.DataFrame([[att, ct1, ct2, ta]], columns = ['att', 'ct1', 'ct2', 'ta'])
  return model.predict(test_row)[0]

"""### Predict My Result"""

print('Subject keys : ')
print('cn', 'cm', 'be','dsa','cs','pslb','imt','mca','dms','java','cg','m3','ai','\niwt','np','dwt','cc','ccwt','os','sepm','ada','mp','deld','crp','csa','ppc')
sub_name = input('Enter the subject name : ')
att = int(input('Enter the attendence : '))
ct1 = int(input('Enter the marks obtained in ct 1 : '))
ct2 = int(input('Enter the marks obtained in ct 2 : '))
ta = int(input('Enter the marks obtained in ta : '))

result = predict_my_result(sub_name, att, ct1, ct2, ta)

if result == 1:
  print("Congratulations, you may pass")
else:
  print("Commiserations, you need to work harder")

"""# **End of File**"""